<!-- START - Addon script, Recognition, back -->
<script>
	if (!settings.show_header) {
		$('.migaku-header').hide();
	}
	if (!settings.show_radicals) {
		$('#radicals_container').hide();
	}

	var noResultsSpan = '<span class="faded-info-msg -spaced">(no results)</span>';

	var isMobileDevice = document
		.querySelector('html')
		.classList
		.contains('mobile');

	function wrap_list(list, intro, outro, no_results_span = true) {
		if (list.length < 1)
			return no_results_span
				? noResultsSpan
				: '';
		return intro + list.join(outro + intro) + outro;
	}

	function search(text) {
		pycmd('open-' + text);
	}

	function search_dict(text) {
		pycmd('search_dict-' + text);
	}

	function show_word_notes(notes) {
		pycmd('show_word-' + notes.join(','));
	}

	function primitive_click() {
		search($(this).data('character'));
	}

	function word_click(evt) {
		var isDictExample = $(this).hasClass('word_default');

		// - Shift + click dict lookup
		// - or, dict example click
		if (evt.shiftKey || isDictExample) {
			search_dict($(this).data('word-kanji'));

		} else if (!isDictExample) {
			var word_idx = $(this).data('word-idx');

			if (word_idx === undefined)
				return;

			var idx = parseInt(word_idx);

			const we = data.words[idx];
			const nids = we[2];

			show_word_notes(nids);
		}
	}

	function set_custom_keyword() {
		pycmd('custom_keyword-' + data.character);
	}

	function set_custom_story() {
		pycmd('custom_story-' + data.character + '-' + (
			data.usr_story
			? data.usr_story
			: ''),);
	}

	function delete_mark(evt) {
		pycmd('delete_mark-' + data.character + '-recognition-' + (
			evt.shiftKey
			? 'false'
			: 'true'),);
	}

	var data_b64 = document
		.getElementById('migaku_data')
		.innerHTML;
	data_b64 = data_b64.replace(/(<([^>]+)>)/gi, ''); // Needed because of Migaku Editor :|
	var data_json = atob(data_b64);
	var data = JSON.parse(data_json);
	{% if is_demo %}
		// ---------------------------------
		// IGNORE - DEMO USE ONLY
		// - '/assets/' prefix only necessary for local development, doesn't work in Anki!!
		// - therefore, don't include this change in Anki deployment...!
		var kanjivg_uri = '/assets/kanji_'; // 'kanji_';
		// ---------------------------------
	{% else %}
		var kanjivg_uri = 'kanji_';
	{% endif %}

	{% include "partials/structure/migaku/scripts/_script-fragment-stroke-order-vars-functions.njk" %}
	{% include "partials/structure/migaku/scripts/_script-fragment-new-dmak.njk" %}

	$('.keyword-kanji').html(data.character);
	$('.fontExample').html(data.character);

	tags = [];
	if (data.frequency_rank < 999999)
		tags.push('Frequency #' + data.frequency_rank.toString());
	if (data.jlpt !== null)
		tags.push('JLPT N' + data.jlpt.toString());
	if (data.kanken !== null)
		tags.push('Kanken ' + data.kanken.toString());
	if (data.grade !== null) {
		const num_conv = '０１２３４５６７８９';
		if (data.grade <= 6)
			tags.push('小学校' + num_conv[data.grade] + '年');
		if (data.grade == 8)
			tags.push('中学年');
		if (data.grade <= 8)
			tags.push('常用');
		if (data.grade >= 9 && data.grade <= 10)
			tags.push('人名用');
		}
	if (data.heisig_id5 !== null)
		tags.push('RTK (1-5) ' + data.heisig_id5.toString());
	if (data.heisig_id6 !== null)
		tags.push('RTK (6+) ' + data.heisig_id6.toString());

	$('.tags').html(wrap_list(tags, '<div class="tag">', '</div>', false));

	$('#onyomi').html(
		data.onyomi.length
		? data.onyomi.join(', ')
		: '-');
	$('#kunyomi').html(
		data.kunyomi.length
		? data.kunyomi.join(', ')
		: '-');
	$('#nanori').html(
		data.nanori.length
		? data.nanori.join(', ')
		: '-');

	var primitives_pts = [];
	for (const p_data of data.primitives_detail) {
		var keywords = [];
		if (p_data.usr_keyword)
			keywords.push(p_data.usr_keyword);
		if (p_data.heisig_keyword5 && !keywords.includes(p_data.heisig_keyword5))
			keywords.push(p_data.heisig_keyword5);
		if (p_data.heisig_keyword6 && !keywords.includes(p_data.heisig_keyword6))
			keywords.push(p_data.heisig_keyword6);
		if (p_data.usr_primitive_keyword)
			keywords.push('<span class="primitive_keyword">' + p_data.usr_primitive_keyword + '</span>');
		for (const pk of p_data.primitive_keywords) {
			const kw = '<span class="primitive_keyword">' + pk + '</span>';
			if (!keywords.includes(kw))
				keywords.push(kw);
			}
		var keywords_txt = keywords.length
			? keywords.join(', ')
			: '-';

		var meanings_txt = p_data.meanings.length
			? p_data
				.meanings
				.join(', ')
			: '-';

		var primitiveHasAlts = p_data.primitive_alternatives.length > 0,
			primitive_alternatives_txt = primitiveHasAlts
				? p_data
					.primitive_alternatives
					.join(', ')
				: '-';

		primitives_pts.push(
			`<button
				class="primitive${primitiveHasAlts
			? ' -has-alternative'
			: ''}"
				data-character="${p_data.character}"
			>
				${p_data.character}
				<div class="primitiveDetails">
					<div class="primitiveDetails-keywords">
						<h3>Keywords:</h3>
						<span>${keywords_txt}</span>
					</div>
					<div class="primitiveDetails-meanings">
						<h3>Meanings:</h3>
						<span>${meanings_txt}</span>
					</div>
					<div class="primitiveDetails-alternatives">
						<h3><h3>${primitiveHasAlts
				? '*'
				: ''}Alternatives:</h3></h3>
						<span>${primitive_alternatives_txt}</span > </div>
		</div>
	</button>`);
	}

	var hasPrimitives = primitives_pts.length > 0;
	$('#primitives').empty();
	$('#primitives').html(
		hasPrimitives
		? primitives_pts.join('')
		: noResultsSpan);

	var primitive_of_pts = [];
	for (const p_data of data.primitive_of_detail) {
		var keywords = [];
		if (p_data.usr_keyword)
			keywords.push(p_data.usr_keyword);
		if (p_data.heisig_keyword5 && !keywords.includes(p_data.heisig_keyword5))
			keywords.push(p_data.heisig_keyword5);
		if (p_data.heisig_keyword6 && !keywords.includes(p_data.heisig_keyword6))
			keywords.push(p_data.heisig_keyword6);
		if (p_data.usr_primitive_keyword)
			keywords.push('<span class="primitive_keyword">' + p_data.usr_primitive_keyword + '</span>');
		for (const pk of p_data.primitive_keywords) {
			const kw = '<span class="primitive_keyword">' + pk + '</span>';
			if (!keywords.includes(kw))
				keywords.push(kw);
			}
		var keywords_txt = keywords.length
			? keywords.join(', ')
			: '-';

		var meanings_txt = p_data.meanings.length
			? p_data
				.meanings
				.join(', ')
			: '-';

		var primitiveOfHasAlts = p_data.primitive_alternatives.length > 0,
			primitive_alternatives_txt = primitiveOfHasAlts
				? p_data
					.primitive_alternatives
					.join(', ')
				: '-';

		primitive_of_pts.push(
			`<button
				class="primitive${primitiveOfHasAlts
			? ' -has-alternative'
			: ''}"
				data-character="${p_data.character}"
			>
				${p_data.character}
				<div class="primitiveDetails">
					<div class="primitiveDetails-keywords">
						<h3>Keywords:</h3>
						<span>${keywords_txt}</span>
					</div>
					<div class="primitiveDetails-meanings">
						<h3>Meanings:</h3>
						<span>${meanings_txt}</span>
					</div>
					<div class="primitiveDetails-alternatives">
						<h3>${primitiveOfHasAlts
				? '*'
				: ''}Alternatives:</h3>
						<span>${primitive_alternatives_txt}</span > </div>
		</div>
	</button>`);
	}

	var hasPrimitivesOf = primitive_of_pts.length > 0;
	$('#primitives_of').empty();
	$('#primitive_of').html(
		hasPrimitivesOf
		? primitive_of_pts.join('')
		: noResultsSpan);

	var kanjiHasPrimitiveAlts = data.primitive_alternatives.length > 0;

	$('#primitive_of_alts').hide();
	$('#primitive_of_alts .primitive-alternatives').empty();

	if (kanjiHasPrimitiveAlts) {
		$('#primitive_of_alts').show();
		$('#primitive_of_alts .primitive-alternatives').html(data.primitive_alternatives.join(', '));
	}

	$('.primitive').click(primitive_click);

	var primitive_of_max = 10;
	if (primitive_of_pts.length > primitive_of_max) {
		$(`#primitive_of .primitive:nth-child(n+${primitive_of_max + 1})`).hide();

		const _$showMoreBtn = document.createElement('button');
		_$showMoreBtn
			.classList
			.add('show-more__button');
		_$showMoreBtn.innerHTML = `more<br/>(${primitive_of_pts.length - primitive_of_max})`;
		_$showMoreBtn.addEventListener('click', function () {
			_$showMoreBtn.remove();
			$(`#primitive_of .primitive:nth-child(n+${primitive_of_max + 1})`).show();
		});
		$('#primitive_of').append(_$showMoreBtn);
	}

	var max_words_front = settings.words_max;
	var word_pts = [];
	var word_front_pts = [];

	for (var i = 0; i < data.words.length; i++) {
		const we = data.words[i];
		const w = we[0];
		const r = we[1];
		const n = we[3];

		let classes = ['word'];
		let front_classes = ['word_front'];
		if (n) {
			classes.push('word_new');
			front_classes.push('word_front_default');
		}

		word_pts.push(
			`
			<button type="button" class="${classes.join(' ')}" data-word-kanji="${w}" data-word-idx="${i}">
				${JapaneseUtil.distributeFuriganaHTML(w, r)}
				${isMobileDevice
			? `<a
							href="https://jisho.org/search/${encodeURI(w)}"
							target="_blank"
							class="jisho-search"
							aria-hidden="true"
							rel="noopener noreferrer"
						></a>`
			: ''}
			</button>
		`);

		if (!(n && settings.hide_default_words) && word_front_pts.length < max_words_front)
			word_front_pts.push(`<div class="${front_classes.join(' ')}">` + JapaneseUtil.distributeFuriganaHTML(w, r) + '</div>',);
		}
	for (var i = 0; i < data.words_default.length; i++) {
		const we = data.words_default[i];
		const w = we[0];
		const r = we[1];

		if (data.words.some(function (existing_we) {
			return w == existing_we[0] && r == existing_we[1];
		}))
			continue;

		word_pts.push(
			`
			<button type="button" class="word word_default" data-word-kanji="${w}">
				${JapaneseUtil.distributeFuriganaHTML(w, r)}
				${isMobileDevice
			? `<a
							href="https://jisho.org/search/${encodeURI(w)}"
							target="_blank"
							class="jisho-search"
							aria-hidden="true"
							rel="noopener noreferrer"
						></a>`
			: ''}
			</button>
		`);

		if (!settings.hide_default_words && word_front_pts.length < max_words_front)
			word_front_pts.push('<div class="word_front word_front_default">' + JapaneseUtil.distributeFuriganaHTML(w, r) + '</div>',);
		}

	var hasLinkedWords = word_pts.length > 0;

	// Only show contained info messages if there are results returned
	var _$containedLinkedWordsInfoMsgs = $('#words')
		.parents('.results-container')
		.find('.faded-info-msg')
	_$containedLinkedWordsInfoMsgs.each(function (idx, msg) {
		$(msg).toggle(hasLinkedWords);
	});

	// Inject linked words into the DOM
	$('#words').empty();
	$('#words').html(
		hasLinkedWords
		? word_pts.join('')
		: noResultsSpan);
	$('#words_front').html(word_front_pts.join(''));

	// Truncate results with "show more" button (if applicable)
	var words_max = 10;
	if (word_pts.length > words_max) {
		$(`#words .word:nth-child(n+${words_max + 1})`).hide();

		const _$showMoreBtn = document.createElement('button');
		_$showMoreBtn
			.classList
			.add('show-more__button');
		_$showMoreBtn.innerHTML = `Show<br/>more<br/>(${word_pts.length - words_max})`;
		_$showMoreBtn.addEventListener('click', function () {
			_$showMoreBtn.remove();
			$(`#words .word:nth-child(n+${words_max + 1})`).show();
		});
		$('#words').append(_$showMoreBtn);
	}

	// Optionally apply hover-only furigana styles
	$('#words').toggleClass('hide_readings_hover', settings.hide_readings_hover);

	if (isMobileDevice) {
		// Simulating a click on a real hyperlink is the only way to reliably open
		// the native/default web browser on both AnkiDroid and iOS. Doing it this
		// way, rather than rendering a hyperlink (instead of a button) is necessary
		// to have consistent styles, and to retain ability to reliably copy/paste link
		// text without link preview pop-ups interfering on iOS. A bit hacky.
		$('.word').click(function () {
			// New/unknown words have additional classes appended
			var isKnownWord = this.classList.length === 1,
				revealOnHoverIsSet = settings.hide_readings_hover,
				hasntAlreadyBeenRevealed = !$(this).data('is-revealed');

			// If the hide "readings on hover" setting has been enabled:
			// 1. reveal furigana on first tap
			// 2. search jisho.org on second tap
			if (isKnownWord && revealOnHoverIsSet && hasntAlreadyBeenRevealed) {
				$(this).data('is-revealed', true);
				$(this).addClass('-reveal-reading');

			} else {
				// It's necessary to use vanilla JS here, since
				// jQuery's equivalent `click()` function doesnt work
				this
					.querySelector('a.jisho-search')
					.click();
			}
		});
	} else {
		// Open Anki card browser on desktop
		$('.word').click(word_click);
	}

	var hasRadicals = data.radicals.length > 0;
	// Only show contained info messages if there are results returned
	var _$containedRadicalInfoMsgs = $('#radicals')
		.parents('.results-container')
		.find('.faded-info-msg')
	_$containedRadicalInfoMsgs.each(function (idx, msg) {
		$(msg).toggle(hasRadicals);
	});

	$('#radicals').empty();
	$('#radicals').html(wrap_list(data.radicals, '<button class="radical">', '</button>'),);

	var keywords = [];
	if (data.usr_keyword)
		keywords.push(data.usr_keyword);
	if (!settings.only_custom_keywords || keywords.length < 1) {
		if (data.heisig_keyword5 && !keywords.includes(data.heisig_keyword5))
			keywords.push(data.heisig_keyword5);
		if (data.heisig_keyword6 && !keywords.includes(data.heisig_keyword6))
			keywords.push(data.heisig_keyword6);
		if (data.usr_primitive_keyword)
			keywords.push('<span class="primitive_keyword">' + data.usr_primitive_keyword + '</span>');
		for (const pk of data.primitive_keywords) {
			const kw = '<span class="primitive_keyword">' + pk + '</span>';
			if (!keywords.includes(kw))
				keywords.push(kw);
			}
		}
	keywords_txt = keywords.length
		? keywords.join(', ')
		: '-';
	$('#keywords').html(keywords_txt);
	if (keywords.length < 1)
		keywords = data.meanings;
	keywords_front_txt = keywords.length
		? keywords.join(', ')
		: '-';
	$('#keywords_front').html(keywords_front_txt);

	var meanings_txt = data.meanings.length
		? data
			.meanings
			.join(', ')
		: '-';
	$('#meanings').html(meanings_txt);
	if (data.meanings.length)
		$('#meanings_front').html(meanings_txt);

	var stories = [];
	if (data.usr_story)
		stories.push(data.usr_story.split('\n').join('<br>'));
	if (!settings.only_custom_stories || stories.length < 1) {
		if (data.heisig_story) {
			var heisig_story = data.heisig_story;
			if (data.heisig_comment)
				heisig_story += '<br><br>' + data.heisig_comment;
			stories.push(heisig_story);
		}
		for (const ks of data.koohi_stories)
			stories.push(ks);
		}

	$('#stories').html(wrap_list(stories, '<p class="story">', '</p>'));
</script>
<!-- END - Addon script, Recognition, back -->
